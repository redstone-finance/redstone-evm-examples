const redstone = require("redstone-protocol");
const { BigNumber } = require("ethers");
const { arrayify, hexlify, toUtf8String } = require("ethers/lib/utils");

const TX_CALLDATA = "0xa935279c000000000000000000000000000000000000000000000000078a0bd0db167b7941564158000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000046804dd401859107b6c00000002000000131989834204fbde4506e2bb0960c41643ab40122ef04ee8d54ce4b3c7ce274c83a029faffa6350b350a425cd63e9e34e0b537c53aa27b43e2fc0c8934c0701ee1b41564158000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000046804dd401859107b6c000000020000001a533a1cf6cf89bff438226c19b224479b045e686d3717c72c8a777769cb6c3121dfe8bc1e5a3e34eff5f923fb0b1124f495a7ebc358d9cfd00d3cb63c71563151b415641580000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000467e03ec01859107b6c000000020000001a9e3411f23d34a8eb83c15b6608060e4ea61650a0547c6d2de091093a2f950bb5f1cc40e908d03575fe2c69c0bb24bbb6587e35f9dfdb8bc2dd4d9798c2dfd591b505450000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003d757f01859107b6c0000000200000015b00543a53f593f050f813f4a41bfbcd85c8a71548e09b704e82462528301115520cd0247845fea06c1d6b8be691c43d83068ab671a46e9d479dbc8d3e15e92e1b505450000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003d7d5f01859107b6c00000002000000143433ceee0b7fd78e4e7ffb62cf1c34ed4ede3ab18cc1ef2d8dc7329f1a1e60270cc6bfd45615c7532825bb436973b790eed1dfa38deea7933bb79fdb5ffcff11c505450000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003d7d5f01859107b6c000000020000001a4a8808558b5988fc09ceff75b5304714114bf0dd4d878bc6c2b5ade83d77d7a644bb5262bdc942b24cd9808dadd87365feee6fbef9cd4a85bcf523d3f50e0871c514900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a2c0b01859107b6c000000020000001cb32a28e52010444195d02e3e99ac82e721a52e35e6f2a13e7c3c30503ed73682cc9812c4dd1d504c10f1c032af0a3273d4406c39b47f5aa31aec88beeb259f81c514900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a2d5201859107b6c00000002000000142434a03961b704d9515cb5077e9f5064c3187eb9c3a9faf297f22ff34711cb709e4c52cf3ea7712c8c261047fba97d04a5af2f5ba3faeb2ff4fbc18e7bd10981c514900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a2c0b01859107b6c0000000200000010ce9a7690af726fc610355f3d19a24c921fe8bf50494bbffb3cce071c040519e6a8a7cbc5b1fda508209558dcb8fe50567731fd7ba9c75fd8b9e17dda75810461c544a5f415641585f555344435f4c50000000000000000000000000000000000000000000000000000000000000000000000000000000000000035382e97ce7a001859107b6c0000000200000010fb73fcfe38ffcff324fcf82a5f4eb93d97e8521afc63dc09b011c911c2763577f1ca35dea67fed5312a15c6856b3c5a141c45216f03f11514ab3e17770097c71c544a5f415641585f555344435f4c5000000000000000000000000000000000000000000000000000000000000000000000000000000000000003537ee6fb754c01859107b6c000000020000001b69886a8a7453f3728e353ed3d3ddb46e474701761f9da6c357226efaa647ebf5a826475b71fbcfe2ddbaa18d3a9087694d4f4748b518a409af63b2f23e59c661b544a5f415641585f555344435f4c50000000000000000000000000000000000000000000000000000000000000000000000000000000000000035381d53fb25001859107b6c000000020000001bace98bda9607968a0023b184eec1cb87828c72474c3af139581bf26dbe9825f2f88df7923670216ebfdfc6e11a542cd9e5bc45c9d5db3004da445eee5fff4641c55534443000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005f5e10001859107b6c0000000200000010605151d5e6f6b5fc5f0c3e36ce6278c7331b0eb8b996f200dfd954505d12b9b33d99948648901fc140d9fb72456c7668e18ba371125fd7fa706364e91f6f33f1c55534443000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005f5e10001859107b6c000000020000001bd7da4a2bd4714338ab87dff6b16388e0806ee700c455b4e3f2957e20ed5adf4144b63250667be6b7a226b8ea60bb1e082209458f4be5107c0fdc35c36b4aeb71b55534443000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005f5e10001859107b6c0000000200000019f8aaf41d6fe2a813015cfd3f3685f108f505d5ec91dfae81448d489dd8b4f1606f606d12ed0c427ef7572cbff3ca3fe06006592f268d37e8a49ca5d079908d51b000f302e302e31352372656473746f6e652d6176616c616e6368652d70726f6400001e000002ed57011e0000";
const LONG_LINE = "------------------------------------------------------------------------";

main();

function main() {
  const txCalldataBytes = arrayify(TX_CALLDATA);
  const parsingResult = redstone.RedstonePayload.parse(txCalldataBytes);

  console.log(parsingResult);

  console.log(LONG_LINE);
  console.log("Unsigned metadata: ", toUtf8String(parsingResult.unsignedMetadata));
  console.log("Data packages count: ", parsingResult.signedDataPackages.length);
  console.log("Calldata without redstone payload: ", hexlify(parsingResult.remainderPrefix));

  let dataPackageIndex = 0;
  for (const signedDataPackage of parsingResult.signedDataPackages) {
    console.log(LONG_LINE);
    console.log(`Data package: ${dataPackageIndex}`);
    console.log("Signer address: ", signedDataPackage.recoverSignerAddress());
    console.log("Data points count: ", signedDataPackage.dataPackage.dataPoints.length);
    console.log("Data points symbols: ", signedDataPackage.dataPackage.dataPoints.map(dp => dp.dataFeedId));
    console.log("Data points values: ", signedDataPackage.dataPackage.dataPoints.map(dp => BigNumber.from(dp.value).toNumber()));

    dataPackageIndex++;
  }
  console.log(LONG_LINE);
}
